"""
В этом уроке будет рассмотрен реальный пример использования блоков try и except для обработки ошибок и исключительных ситуаций.
В качестве примера будет использован текстовый файл под названием «calc.txt», содержащий примерно 10 000 строк.
Каждая строка будет состоять из трех элементов: сначала идет какое-то число, затем через пробел
указана арифметическая операция (например, целочисленное деление), и после этого — второе число.
Задача заключается в том, чтобы считать каждую строку из текстового файла и вывести результат арифметического выражения на консоль.
При работе с данными могут возникать ситуации, когда они оказываются некорректными.
Например, одной из таких ситуаций является префиксная запись, при которой математический операнд располагается перед числами.
В этом случае данные будут считаться некорректными, так как первое число будет записываться в первую переменную,
второй операнд — во вторую, а третья переменная должна содержать второе число.
Еще одной распространенной исключительной ситуацией является недостаток данных, например,
отсутствие второго числа или математического операнда. Это также считается некорректными данными.

Чтобы избежать остановки программы при возникновении таких ошибок, целесообразно использовать обработку исключений.
Вместо того чтобы просто выводить ошибку, можно перехватывать возникающие исключения, выводить информацию о строке,
в которой произошла ошибка, и сообщать об этом работодателю/

В файле «calc.txt» уже содержатся сгенерированные строки, в которых сначала записано первое число, затем пробел,
математический операнд, пробел и второе число.
Однако могут встретиться некорректные строки, например, если порядок данных нарушен или отсутствует математический операнд,
алгебраический знак или даже второе число. Все эти случаи необходимо перехватывать и обрабатывать.

Сначала рекомендуется писать программу, исходя из идеальных условий, без использования дополнительных блоков try и except.
"""

# Для начала создадим функцию под названием 'calk' (калькулятор), которая будет принимать строку 'line'
# в качестве входных данных. Каждая строка представляет собой текстовое выражение, состоящее из первого числа,
# разделённого пробелом от математического операнда, и второго числа.
# Необходимо разделить строку и сохранить три объекта в разные переменные.

"""
Сделать это можно с помощью метода «split», указав в качестве разделителя пробел. 
Переменные можно назвать следующим образом: в 'operand1' будет храниться первое число, 
в 'operation' — математическая операция, а в 'operand2' — второе число. Таким образом, 
будет создано три переменные с понятными названиями, соответствующими их значениям, 
что соответствует принципам хорошего программирования.
"""
# После этого в функции мы применим метод split к строке 'line', чтобы разделить её на части.
# Далее можно просто вывести наши переменные: сначала 'operand1', затем 'operation' и в конце 'operand2'.
# Каждый раз при вызове этой функции будет отображаться считанная строка. Это базовая функция,
# предназначенная для проверки правильности считывания данных.

def calk(line):
    operand_1, operation, operand_2 = line.split(' ')
# Мы уже описали наш базовый калькулятор, но давайте подумаем, что может быть не так.
# Вспомним, что в файле 'calc.txt' все данные сохранены в виде строк, что для нас удобно,
# но переменные 'operand1' и 'operand2' должны быть числами. Поэтому давайте преобразуем их в числа, переопределив переменные.
# 'operand1' будет тем же самым значением, но преобразованным в число, а 'operand2' будет аналогично обработан.
    operand_1 = int(operand_1)
    operand_2 = int(operand_2)
    # Для вычитания проверим, если операция '-', тогда будем вычитать. Если операция '/', будем делить. Если операция '//',
    # будем выполнять целочисленное деление. Если же операция '%', будем выполнять деление с остатком.
    # Если у нас операция '*', то будем умножать.
# Для изменения поведения программы можно исключить вывод результатов правильного деления.
# Для этого необходимо добавить три двойные кавычки перед строкой 'if operation == ‘+’'.
# Таким образом, все операции будут закомментированы, и на консоли будут отображаться только сообщения об ошибках.
    """if operation == '+':
        print(f'Результат: {operand_1 + operand_2}')
    if operation == '-':
        print(f'Результат: {operand_1 - operand_2}')
    if operation == '/':
        print(f'Результат: {operand_1 / operand_2}')
    if operation == '//':
        print(f'Результат: {operand_1 // operand_2}')
    if operation == '%':
        print(f'Результат: {operand_1 % operand_2}')
    if operation == '*':
        print(f'Результат: {operand_1 * operand_2}')"""

# Надо открыть файл, мы будем делать это с помощью контекстного менеджера 'with open'. Откроем файл 'calc.txt' для чтения,
# то есть добавим параметр 'r'. Сохраним его под именем «file», используя конструкцию 'as file'.
# Затем мы можем считывать строки с помощью цикла: «for line in file».
# Внутри этого цикла будем вызывать нашу функцию 'calk' и передавать ей нашу строку 'line'.

# введем счётчик 'cnt', который будет равен 0.
cnt = 0

with open('calc.txt', 'r') as file:
    for line in file:
        cnt += 1
# Следует рассмотреть, какие ошибки могут возникнуть. В частности, может возникнуть ошибка 'ValueError: invalid literal for int() with base 10'.
# Эта ошибка указывает на то, что программа пыталась преобразовать строку в число, но не смогла сделать это, например,
# при встрече знака минус, который не может быть интерпретирован как число. Это ошибка значения, и с такой вариацией
# необходимо уметь работать и отлавливать её.
# При вызове функции 'calc' стоит поместить этот вызов в блок try. Программа будет пытаться вызвать функцию,
# и если возникнет ошибка ValueError, будет выведено сообщение «Ошибка» с помощью команды print.
        try:
            calk(line)
        except ValueError as exc:
            if 'unpack' in exc.args[0]:
                print(f'Ошибка в строке {cnt}, не хватает данных для ответа')
            else:
                print(f'Ошибка в строке {cnt}, не удалось перевести в число')
            # print(f"Ошибка в строке {cnt}, возникла {exc}, с параметрами {exc.args}")

# Хотя ошибка уже зафиксирована, предоставленной информации недостаточно. Необходимо указать, с какими данными
# это произошло и на какой строке. Для начала следует ввести счётчик 'cnt', который будет равен 0.
# Каждый раз при обработке новой строки счётчик будет увеличиваться на единицу. Это первое изменение.
# Во-вторых, если возникнет ошибка, следует выводить сообщение «Ошибка в строке» с указанием номера строки,
# используя значение 'cnt'.

"""
Смотрите, у нас есть такие параметры для обработки ошибок. 
Первое: если в нулевом элементе кортежа 'args' присутствует слово «unpack», то давайте выводить эту ошибку более красиво. 
Необходимо дополнить условие так: 'if 'unpack' in exc.args[0]', чтобы убедиться, что в нулевом элементе кортежа 
действительно встречается это слово. В таком случае выводим сообщение: «Ошибка в линии: не хватает данных для ответа».
Второй тип ошибок возникает, когда невозможно перевести строку в десятичное число. В этом случае следует выводить сообщение,
указывающее на возникшую проблему: «Ошибка в такой-то строке: не удалось перевести в число».
"""
"""
2.
Теперь стоит обратить внимание на работу программы. После внесенных изменений видно сообщение о том, 
что ошибка возникла в строке. Это позволяет точно определить, на каких строках появляются ошибки. 
Этот уровень детализации уже улучшает ситуацию, но информации всё еще недостаточно для полного понимания, 
какая именно ошибка произошла.
Для дальнейшего улучшения программы рекомендуется сохранить информацию об ошибке в переменной. 
При возникновении ошибки класс исключения будет присваиваться переменной 'exc', что является сокращением от «exception».
Затем, в случае возникновения ошибки, будет выводиться сообщение: «Ошибка в строке {cnt} возникла:», 
после чего добавляется переменная 'exc', а также параметры ошибки можно будет вывести с помощью 'exc.args'
"""
"""
1.
У нас есть три переменные: 'operand1', 'operation' и 'operand2'. Как мы можем решить нашу задачу?
Нам необходимо вывести результат математического выражения. Давайте рассмотрим, какие математические операции
могут встречаться: сложение, вычитание, умножение, деление, целочисленное деление и деление с остатком.
Это все базовые математические операции.
Если нам даны два числа и операция, мы можем использовать блоки if и else, чтобы проверить, 
какая операция задана и что нам нужно сделать. Например, если operation == '+', то мы просто печатаем результат
в формате: 'operand1 + operand2'. Мы уже описали первую математическую операцию, 
теперь нам остается всего лишь повторить это для остальных операций.
"""
"""
3.
Теперь давайте рассмотрим, какие ошибки могут возникать в программе. В частности, ошибка появляется, когда недостаточно
данных для распаковки.
Это указывает на то, что в строке не хватает элементов для корректного выполнения операции, что может быть связано с 
неправильным форматом данных.
Также возникает ошибка, когда происходит попытка преобразования строки в число, и это не удается из-за некорректных параметров.
Эта ошибка указывает на то, что строка содержит данные, которые не могут быть интерпретированы как числа, 
что приводит к сбою выполнения программы.
Мы видим, что возникает только два подтипа ошибок.
Первый тип — это когда не удается распаковать значение, а второй — это когда невозможно перевести строку в десятичное число.
Давайте разделим эти ошибки. Также стоит немного улучшить программу и сделать её более читабельной. 
Когда возникает ошибка, может быть трудно понять, что именно произошло.

"""





